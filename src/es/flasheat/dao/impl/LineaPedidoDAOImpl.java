package es.flasheat.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import es.flasheat.dao.LineaPedidoDAO;
import es.flasheat.model.LineaPedido;
import es.flasheat.model.Pedido;
import es.flasheat.model.PedidoEstado;
import es.flasheat.model.Restaurante;
import es.flasheat.model.Usuario;
import es.flasheat.util.DBUtils;
import es.flasheat.util.DataException;
import es.flasheat.util.JDBCUtils;

public class LineaPedidoDAOImpl implements LineaPedidoDAO{
	
	private static Logger logger = LogManager.getLogger(CategoriaDAOImpl.class.getName());

	@Override
	public List<LineaPedido> findByPedido(Connection connection, Long idPedido) throws DataException{
		List<LineaPedido> lineas = new ArrayList<LineaPedido>();
		PreparedStatement preparedStatement = null;
		String query = null;
		ResultSet rs = null;

		try {

			//Crear una sentencia SQL y Meter en rs el resultado de la query.
			StringBuilder sb = new StringBuilder(
					" SELECT ID_LINEA_PEDIDO, ID_PEDIDO, PRECIO_TOTAL, ID_PRODUCTO "+
							"FROM LINEA_PEDIDO "+
							"WHERE ID_PEDIDO = ?");

			// Componer la query (en sb) segun criterios de búsqueda
			query = sb.toString();
			if (logger.isDebugEnabled()) logger.debug(query);
			
			preparedStatement = connection.prepareStatement(query);
			
			int i = 1;
			preparedStatement.setLong(i++, idPedido);
			
			rs = preparedStatement.executeQuery();
			// si hay datos en rs añade un Restaurante a la lista con esos datos.

			while (rs.next()) {
				lineas.add(loadNext(rs));
			}
		} catch (SQLException e) {
			logger.error("Problema en la Query.");
			e.printStackTrace();
		} finally {
			JDBCUtils.closeResultSet(rs);
			JDBCUtils.closeStatement(preparedStatement);
		}
		return lineas;
	}
	

	@Override
	public void insertar(Connection connection, LineaPedido lp) throws DataException{
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		
		try {

			// Creamos el preparedstatement
			String queryString = " insert into Linea_Pedido (ID_PEDIDO, PRECIO_TOTAL, ID_PRODUCTO, CANTIDAD) "
								+" values (?, ?, ?, ?)";	
			
			preparedStatement = connection.prepareStatement(queryString,
									Statement.RETURN_GENERATED_KEYS);

			
			logger.debug(queryString);
			// Fill the "preparedStatement"
			int i = 1;             
			preparedStatement.setLong(i++, lp.getIdPedido());
			preparedStatement.setDouble(i++, lp.getPrecio());
			preparedStatement.setLong(i++, lp.getIdProducto());
			preparedStatement.setInt(i++, lp.getCantidad());

			// Execute query
			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("Can not add row to table 'Linea_Pedido'");
			}
						
			// Recuperamos la PK generada
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				Long id = resultSet.getLong(1); 
				lp.setIdLineaPedido(id);
			} else {
				// TODO 
				// PENDIENTE DE QUE EL PROFE EXPLIQUE LAS EXCEPTIONS
				// throw new DataException("Unable to fetch autogenerated primary key");
			}
			
		} catch (Exception e) {
			// TODO EXPLICAR EXCEPTIONS
			// PENDIENTE DE QUE EL PROFE EXPLIQUE LAS EXEPTIONS
			e.printStackTrace();
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}
			// Return the DTO
			// return p;
	}

	@Override
	public void deleteByPedido(Connection connection, Long idPedido) throws DataException{
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
	
		try {

			// Creamos el preparedstatement
			String queryString = " DELETE FROM Linea_Pedido WHERE id_pedido = ?";	
			
			preparedStatement = connection.prepareStatement(queryString,
									Statement.RETURN_GENERATED_KEYS);

			
			logger.debug(queryString);
			// Fill the "preparedStatement"
			int i = 1;             
			preparedStatement.setLong(i++, idPedido);

			// Execute query
			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("Can not delete to table 'Linea_Pedido'");
			}
						
			} catch (Exception e) {
			// TODO EXPLICAR EXCEPTIONS
			// PENDIENTE DE QUE EL PROFE EXPLIQUE LAS EXEPTIONS
			e.printStackTrace();
			} finally {
				JDBCUtils.closeResultSet(resultSet);
				JDBCUtils.closeStatement(preparedStatement);
			}
	}
	
	
	private LineaPedido loadNext(ResultSet rs) 
			throws SQLException {

	int i = 1;
	LineaPedido linea = new LineaPedido();  

	linea.setIdLineaPedido(rs.getLong(i++));
	linea.setIdPedido(rs.getLong(i++));
	linea.setPrecio(rs.getDouble(i++));
	linea.setIdProducto(rs.getLong(i++));
	linea.setCantidad(rs.getInt(i++));
	
	return linea;
}

}
