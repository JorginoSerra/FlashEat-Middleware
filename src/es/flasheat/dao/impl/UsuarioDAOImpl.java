 package es.flasheat.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import es.flasheat.dao.UbicacionDAO;
import es.flasheat.dao.UsuarioDAO;
import es.flasheat.model.Ubicacion;
import es.flasheat.model.Usuario;
import es.flasheat.util.DataException;
import es.flasheat.util.JDBCUtils;
import es.flasheat.util.PasswordEncryptionUtil;

public class UsuarioDAOImpl implements UsuarioDAO{

	private static Logger logger = LogManager.getLogger(CategoriaDAOImpl.class.getName());
	
	private UbicacionDAO ubicacionDAO = null;
	public UsuarioDAOImpl() {
		ubicacionDAO = new UbicacionDAOImpl();
	}
	
	@Override
	public Usuario findById(Connection connection, Long id) throws DataException{
		Usuario usuario = null;
		PreparedStatement preparedStatement = null;
		String query = null;
		ResultSet rs = null;

		try {

			//Crear una sentencia SQL y Meter en rs el resultado de la query.
			StringBuilder sb = new StringBuilder(
					" SELECT ID_USUARIO, NOMBRE, APELLIDO, FECHA_NACIMIENTO, EMAIL, TELEFONO, ID_SEXO, CONTRASENA "+
							"FROM USUARIO "+
							"WHERE ID_USUARIO = ?");

			// Componer la query (en sb) segun criterios de búsqueda
			query = sb.toString();
			System.out.println(query);
			
			preparedStatement = connection.prepareStatement(query);
			
			int i = 1;
			preparedStatement.setLong(i++, id);
			
			rs = preparedStatement.executeQuery();
			// si hay datos en rs añade un Restaurante a la lista con esos datos.

			if (rs.next()) {
				usuario = (loadNext(rs));
			}
		} catch (SQLException e) {
			System.out.println("Problema en la Query.");
			e.printStackTrace();
		} finally {
			JDBCUtils.closeStatement(preparedStatement);
			JDBCUtils.closeResultSet(rs);
		}
		return usuario;
	}

	@Override
	public Usuario findByEmail(Connection connection, String email) throws DataException{
		Usuario usuario = null;
		PreparedStatement preparedStatement = null;
		String query = null;
		ResultSet rs = null;

		try {

			//Crear una sentencia SQL y Meter en rs el resultado de la query.
			StringBuilder sb = new StringBuilder(
					" SELECT ID_USUARIO, NOMBRE, APELLIDO, FECHA_NACIMIENTO, EMAIL, TELEFONO, ID_SEXO, CONTRASENA "+
							"FROM USUARIO "+
							"WHERE EMAIL = ?");

			// Componer la query (en sb) segun criterios de búsqueda
			query = sb.toString();
			System.out.println(query);
			
			preparedStatement = connection.prepareStatement(query);
			
			int i = 1;
			preparedStatement.setString(i++, email);
			
			rs = preparedStatement.executeQuery();
			// si hay datos en rs añade un Restaurante a la lista con esos datos.

			if (rs.next()) {
				usuario = (loadNext(rs));
			}
		} catch (SQLException e) {
			System.out.println("Problema en la Query.");
			e.printStackTrace();
		} finally {
			JDBCUtils.closeStatement(preparedStatement);
			JDBCUtils.closeResultSet(rs);
		}
		return usuario;
	}
	

	@Override
	public void insertar(Connection connection, Usuario u) throws DataException{
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		
		try {

			// Creamos el preparedstatement
			String queryString = " insert into usuario (NOMBRE, APELLIDO, FECHA_NACIMIENTO, EMAIL, TELEFONO, ID_SEXO, CONTRASENA) "
								+" values (?, ?, ?, ?, ?, ?, ?)";	
			
			preparedStatement = connection.prepareStatement(queryString,
									Statement.RETURN_GENERATED_KEYS);

			
			System.out.println(queryString);
			// Fill the "preparedStatement"
			int i = 1;             
			preparedStatement.setString(i++, u.getNombre());
			preparedStatement.setString(i++, u.getApellidos());
			preparedStatement.setDate(i++, new java.sql.Date(u.getFechaDeNacimiento().getTime()));
			preparedStatement.setString(i++, u.getEmail());
			preparedStatement.setString(i++, u.getTelefono());
			preparedStatement.setString(i++, u.getIdSexo());
			preparedStatement.setString(i++, PasswordEncryptionUtil.encryptPassword(u.getContraseña()));

			// Execute query
			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("Can not add row to table 'Usuario'");
			}
						
			// Recuperamos la PK generada
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				Long id = resultSet.getLong(1); 
				u.setId(id);
			} else {
				// TODO 
				// PENDIENTE DE QUE EL PROFE EXPLIQUE LAS EXCEPTIONS
				// throw new DataException("Unable to fetch autogenerated primary key");
			}
			
		} catch (Exception e) {
			// TODO EXPLICAR EXCEPTIONS
			// PENDIENTE DE QUE EL PROFE EXPLIQUE LAS EXEPTIONS
			e.printStackTrace();
		} finally {
			JDBCUtils.closeStatement(preparedStatement);
			JDBCUtils.closeResultSet(resultSet);
		}
			// Return the DTO
			// return p;
	}

	@Override
	public void update(Connection connection, Usuario u) throws DataException{
		
		PreparedStatement preparedStatement = null;
		
		try {
		
			// Creamos el preparedstatement
			String queryString = " UPDATE Usuario" +
					" SET Nombre = ?, Apellido = ?, Fecha_Nacimiento = ?, Email = ?, Telefono = ?, id_sexo = ? " + 
					" WHERE id_usuario = ? ";
			
			preparedStatement = connection.prepareStatement(queryString,
									Statement.RETURN_GENERATED_KEYS);

			int i = 1;
			System.out.println(queryString);
			// Fill the "preparedStatement"    
			preparedStatement.setString(i++, u.getNombre());
			preparedStatement.setString(i++, u.getApellidos());
			preparedStatement.setDate(i++, new java.sql.Date(u.getFechaDeNacimiento().getTime()));
			preparedStatement.setString(i++, u.getEmail());
			preparedStatement.setString(i++, u.getTelefono());
			preparedStatement.setString(i++, u.getIdSexo());
			preparedStatement.setLong(i++, u.getId());

			// Execute query
			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("Can not add row to table 'Pedido'");
			}
			
		} catch (Exception e) {
			// TODO EXPLICAR EXCEPTIONS
			// PENDIENTE DE QUE EL PROFE EXPLIQUE LAS EXEPTIONS
			e.printStackTrace();
		} finally {
			JDBCUtils.closeStatement(preparedStatement);
		}
	}

	@Override
	public void delete(Connection connection, Long id) throws DataException{
		PreparedStatement preparedStatement = null;
		
		try {
		
			// Creamos el preparedstatement
			String queryString = " DELETE FROM Usuario WHERE id_usuario = ?";	
			
			preparedStatement = connection.prepareStatement(queryString,
									Statement.RETURN_GENERATED_KEYS);

			
			System.out.println(queryString);
			// Fill the "preparedStatement"
			int i = 1;             
			preparedStatement.setLong(i++, id);

			// Execute query
			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("Can not delete to table 'usuario");
			}
						
			} catch (Exception e) {
			// TODO EXPLICAR EXCEPTIONS
			// PENDIENTE DE QUE EL PROFE EXPLIQUE LAS EXEPTIONS
			e.printStackTrace();
			} finally {
				JDBCUtils.closeStatement(preparedStatement);
			}
	}

	@Override
	public void addUbicacion(Connection connection, Long idUsuario, Ubicacion u) throws DataException{
		PreparedStatement preparedStatement = null;
		
		try {
			ubicacionDAO.insertar(connection, u);
			// Creamos el preparedstatement
			String queryString = " insert into usuario_ubicacion (id_usuario, id_ubicacion) "
								+" values (?, ?)";
			
			preparedStatement = connection.prepareStatement(queryString,
									Statement.RETURN_GENERATED_KEYS);

			
			System.out.println(queryString);
			// Fill the "preparedStatement"
			int i = 1;             
			preparedStatement.setLong(i++, idUsuario);
			preparedStatement.setLong(i++, u.getId());

			// Execute query
			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("Can not add row to table 'usuario_ubicacion'");
			}
			
		} catch (Exception e) {
			// TODO EXPLICAR EXCEPTIONS
			// PENDIENTE DE QUE EL PROFE EXPLIQUE LAS EXEPTIONS
			e.printStackTrace();
		} finally {
			JDBCUtils.closeStatement(preparedStatement);
		}
			// Return the DTO
			// return p;
	}

	@Override
	public void deleteUbicacion(Connection connection, Long idUsuario, Long idUbicacion) throws DataException{
		PreparedStatement preparedStatement = null;
		
		try {
			
			// Creamos el preparedstatement
			String queryString = " Delete from usuario_ubicacion where id_ubicacion = ? AND idUsuario = ? ";
			
			preparedStatement = connection.prepareStatement(queryString,
									Statement.RETURN_GENERATED_KEYS);

			
			System.out.println(queryString);
			// Fill the "preparedStatement"
			int i = 1;             
			preparedStatement.setLong(i++, idUbicacion);
			preparedStatement.setLong(i++, idUsuario);

			// Execute query
			int insertedRows = preparedStatement.executeUpdate();
			
			if (insertedRows == 0) {
				throw new SQLException("Can not delete row to table 'usuario_ubicacion'");
			}
			
		} catch (Exception e) {
			// TODO EXPLICAR EXCEPTIONS
			// PENDIENTE DE QUE EL PROFE EXPLIQUE LAS EXEPTIONS
			e.printStackTrace();
		} finally {
			JDBCUtils.closeStatement(preparedStatement);
		}
			// Return the DTO
		ubicacionDAO.delete(connection, idUbicacion);
	}

	public void addSeguirRestaurante(Connection connection, Long idUsuario, Long idRestaurante) throws DataException{
		PreparedStatement preparedStatement = null;
		
		try {
			// Creamos el preparedstatement
			String queryString = " insert into usuario_sigue_restaurante (id_usuario, id_restaurante) "
								+" values (?, ?)";
			
			preparedStatement = connection.prepareStatement(queryString,
									Statement.RETURN_GENERATED_KEYS);

			
			System.out.println(queryString);
			// Fill the "preparedStatement"
			int i = 1;             
			preparedStatement.setLong(i++, idUsuario);
			preparedStatement.setLong(i++, idRestaurante);

			// Execute query
			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("Can not add row to table 'seguir_restaurante'");
			}
			
		} catch (Exception e) {
			// TODO EXPLICAR EXCEPTIONS
			// PENDIENTE DE QUE EL PROFE EXPLIQUE LAS EXEPTIONS
			e.printStackTrace();
		} finally {
			JDBCUtils.closeStatement(preparedStatement);
		}
			// Return the DTO
			// return p;
	}
	
	public void deleteSeguirRestaurante(Connection connection, Long idUsuario, Long idRestaurante) throws DataException{
		PreparedStatement preparedStatement = null;
		
		try {
		
			// Creamos el preparedstatement
			String queryString = " Delete from usuario_sigue_restaurante where id_usuario = ? AND id_restaurante = ? ";
			
			preparedStatement = connection.prepareStatement(queryString,
									Statement.RETURN_GENERATED_KEYS);

			
			System.out.println(queryString);
			// Fill the "preparedStatement"
			int i = 1;             
			preparedStatement.setLong(i++, idUsuario);
			preparedStatement.setLong(i++, idRestaurante);
			
			// Execute query
			int insertedRows = preparedStatement.executeUpdate();
			
			if (insertedRows == 0) {
				throw new SQLException("Can not delete row to table 'usuario_sigue_restaurante'");
			}
			
		} catch (Exception e) {
			// TODO EXPLICAR EXCEPTIONS
			// PENDIENTE DE QUE EL PROFE EXPLIQUE LAS EXEPTIONS
			e.printStackTrace();
		} finally {
			JDBCUtils.closeStatement(preparedStatement);
		}
	}
	
	private Usuario loadNext(ResultSet rs) 
			throws SQLException, DataException{

	int i = 1;
	Usuario usuario = new Usuario();  

	usuario.setId(rs.getLong(i++));
	usuario.setNombre(rs.getString(i++));
	usuario.setApellidos(rs.getString(i++));
	usuario.setFechaDeNacimiento(rs.getDate(i++));
	usuario.setEmail(rs.getString(i++));
	usuario.setTelefono(rs.getString(i++));
	usuario.setIdSexo(rs.getString(i++));
	usuario.setContraseña(rs.getString(i++));
	return usuario;
}

}
